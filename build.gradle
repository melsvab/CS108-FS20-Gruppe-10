plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}
apply plugin: 'checkstyle'
checkstyle {
    toolVersion = '6.16.1'
    config = rootProject.resources.text.fromFile('config/checkstyle/checkstyle.xml')
}
configurations {
    checkstyleConfig
}
javafx {
    version = "11.0.2"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.base']
}
tasks.register("build-cs108") {
    group = 'build'
    doLast {
        println 'Running cs108 build task to generate a standalone jar and javadoc.'
        jar {
            manifest {
                attributes(
                        'Main-Class': 'Start'
                )
            }
            from {
                configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
                configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
            }
        }
    }
}
configurations {
    checkstyleConfig
}
group 'EilÃ¤nders'
version '0.0.1-ALPHA'
mainClassName = 'Start'

//specifies source compatibility to Java 11
sourceCompatibility = 1.11

//adds maven central as a maven repository
repositories {
    mavenCentral()
    jcenter()
}

/* The following lines are extensively documented. Please remove the documentation when you have read and understood it. */
dependencies {

    //added SLF4J --> the logback classic and core to use Logger and LoggerFactory
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'


    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha5'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha5'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha5'
    testCompile group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha5'
    checkstyleConfig("com.puppycrawl.tools:checkstyle:8.29") { transitive = false }

    /*
    This is another example - it imports the javafx-controls dependency
     */
    implementation 'org.openjfx:javafx-controls:11.0.2'

    // JUNIT
    /*
    The following dependency is required to perform JUnit tests, as for example HelloWorldTest.
    Since it is a `testCompile` dependency, it will not be part of the final product, only during testing.
     */
    testImplementation 'junit:junit:4.+'
}

/*
The following block adds both compile and runtime dependencies to the jar
 */
jar {
    manifest {
        attributes(
                'Main-Class': 'Start'
        )
    }
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
